const fs = require('fs');
const path = require('path');

// Fonction pour analyser le CSS utilis√© dans les composants
function analyzeCSSUsage() {
  console.log('üé® Analyse de l\'utilisation du CSS...\n');
  
  const cssClasses = new Set();
  const usedClasses = new Set();
  
  // Lire le fichier CSS global
  const globalCSSPath = path.join(__dirname, '../app/globals.css');
  if (fs.existsSync(globalCSSPath)) {
    const cssContent = fs.readFileSync(globalCSSPath, 'utf8');
    
    // Extraire les classes CSS personnalis√©es (non-Tailwind)
    const classRegex = /\.([a-zA-Z-_][a-zA-Z0-9-_]*)\s*{/g;
    let match;
    while ((match = classRegex.exec(cssContent)) !== null) {
      cssClasses.add(match[1]);
    }
    
    console.log(`üìã Trouv√© ${cssClasses.size} classes CSS personnalis√©es`);
  }
  
  // Analyser les fichiers JS/JSX pour les classes utilis√©es
  function scanDirectory(dir) {
    if (!fs.existsSync(dir)) return;
    
    const files = fs.readdirSync(dir, { recursive: true });
    
    for (const file of files) {
      if (file.endsWith('.js') || file.endsWith('.jsx') || file.endsWith('.ts') || file.endsWith('.tsx')) {
        const filePath = path.join(dir, file);
        if (fs.statSync(filePath).isFile()) {
          const content = fs.readFileSync(filePath, 'utf8');
          
          // Chercher les r√©f√©rences aux classes CSS
          for (const className of cssClasses) {
            if (content.includes(className)) {
              usedClasses.add(className);
            }
          }
        }
      }
    }
  }
  
  // Scanner les r√©pertoires principaux
  scanDirectory(path.join(__dirname, '../app'));
  scanDirectory(path.join(__dirname, '../components'));
  scanDirectory(path.join(__dirname, '../pages'));
  
  const unusedClasses = [...cssClasses].filter(cls => !usedClasses.has(cls));
  
  console.log(`‚úÖ Classes utilis√©es: ${usedClasses.size}`);
  console.log(`‚ùå Classes non utilis√©es: ${unusedClasses.length}`);
  
  if (unusedClasses.length > 0) {
    console.log('\nüóëÔ∏è  Classes CSS non utilis√©es d√©tect√©es:');
    unusedClasses.forEach(cls => console.log(`  - .${cls}`));
    
    console.log('\nüí° Pour optimiser, vous pouvez supprimer ces classes du CSS global.');
  } else {
    console.log('\nüéâ Aucune classe CSS inutilis√©e d√©tect√©e!');
  }
  
  return { usedClasses: Array.from(usedClasses), unusedClasses };
}

// Fonction pour optimiser les imports Tailwind
function optimizeTailwindImports() {
  console.log('\nüéØ Optimisation des imports Tailwind...');
  
  const tailwindConfigPath = path.join(__dirname, '../tailwind.config.js');
  if (fs.existsSync(tailwindConfigPath)) {
    const configContent = fs.readFileSync(tailwindConfigPath, 'utf8');
    
    // V√©rifier si le purge/content est bien configur√©
    if (configContent.includes('content:') || configContent.includes('purge:')) {
      console.log('‚úÖ Configuration Tailwind purge trouv√©e');
      
      // Suggestions d'optimisation
      console.log('\nüí° Suggestions d\'optimisation Tailwind:');
      console.log('  - Assurez-vous que tous les fichiers sont inclus dans le content');
      console.log('  - Consid√©rez l\'utilisation de safelist pour les classes dynamiques');
      console.log('  - Utilisez des composants r√©utilisables pour r√©duire la duplication');
    } else {
      console.log('‚ö†Ô∏è  Configuration purge Tailwind non trouv√©e - CSS potentiellement non optimis√©');
    }
  }
}

// Fonction pour analyser la taille des CSS
function analyzeCSSSize() {
  console.log('\nüìä Analyse de la taille des fichiers CSS...');
  
  const nextStaticCSS = path.join(__dirname, '../.next/static/css');
  if (fs.existsSync(nextStaticCSS)) {
    const files = fs.readdirSync(nextStaticCSS);
    const cssFiles = files.filter(file => file.endsWith('.css'));
    
    let totalSize = 0;
    cssFiles.forEach(file => {
      const filePath = path.join(nextStaticCSS, file);
      const size = fs.statSync(filePath).size;
      totalSize += size;
      console.log(`  ${file}: ${(size / 1024).toFixed(1)} KB`);
    });
    
    console.log(`\nüìà Taille totale CSS: ${(totalSize / 1024).toFixed(1)} KB`);
    
    if (totalSize > 50 * 1024) { // Plus de 50KB
      console.log('‚ö†Ô∏è  Taille CSS importante - consid√©rez l\'optimisation');
    } else {
      console.log('‚úÖ Taille CSS optimale');
    }
  } else {
    console.log('‚ö†Ô∏è  Dossier CSS de build non trouv√© - ex√©cutez d\'abord "npm run build"');
  }
}

// Fonction principale
function main() {
  console.log('üöÄ Analyse CSS et optimisation...\n');
  
  try {
    const analysis = analyzeCSSUsage();
    optimizeTailwindImports();
    analyzeCSSSize();
    
    console.log('\nüéâ Analyse termin√©e!');
    
    // Cr√©er un rapport
    const report = {
      timestamp: new Date().toISOString(),
      usedClasses: analysis.usedClasses.length,
      unusedClasses: analysis.unusedClasses.length,
      unusedClassesList: analysis.unusedClasses,
    };
    
    const reportPath = path.join(__dirname, '../.next/css-analysis-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`üìÑ Rapport sauvegard√© dans: ${reportPath}`);
    
  } catch (error) {
    console.error('‚ùå Erreur lors de l\'analyse:', error.message);
  }
}

if (require.main === module) {
  main();
}

module.exports = { analyzeCSSUsage, optimizeTailwindImports, analyzeCSSSize }; 