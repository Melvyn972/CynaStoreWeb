// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String?   @unique
  emailVerified       DateTime?
  image               String?
  customerId          String? // Stripe customer ID
  priceId             String? // Stripe price ID
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  role                UserRole  @default(USER)
  phone               String?
  address             String?
  consentMarketing    Boolean   @default(false)
  consentAnalytics    Boolean   @default(false)
  consentThirdParty   Boolean   @default(false)
  dataRetentionPeriod String    @default("2_years") // How long we keep user data

  accounts       Account[]
  sessions       Session[]
  cart           Cart[]
  purchases      Purchase[] // User's purchased articles
  consentHistory ConsentHistory[] // Track consent history
}

enum UserRole {
  ADMIN
  USER
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Lead {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Articles {
  id          String     @id @default(cuid())
  title       String
  description String
  image       String?
  category    String
  price       Float      @default(0)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  purchases   Purchase[] // Users who purchased this article
  cartItems   Cart[] // Items in users' carts
}

model Purchase {
  id           String    @id @default(cuid())
  userId       String
  articleId    String
  purchaseDate DateTime  @default(now())
  quantity     Int       @default(1)
  paidAt       DateTime?
  orderId      String?

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article Articles @relation(fields: [articleId], references: [id], onDelete: Cascade)
}

model Cart {
  id        String   @id @default(cuid())
  userId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  article   Articles @relation(fields: [productId], references: [id], onDelete: Cascade)
}

// Track user consent history
model ConsentHistory {
  id          String   @id @default(cuid())
  userId      String
  consentType String // "marketing", "analytics", "thirdParty"
  status      Boolean // true for granted, false for revoked
  timestamp   DateTime @default(now())
  ipAddress   String? // Store IP address for audit purposes
  userAgent   String? // Store browser/device info

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
